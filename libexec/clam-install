#!/usr/bin/env bash

set -euo pipefail

source ${CLENV_ROOT}/lib/util.shrc
source ${CLENV_ROOT}/lib/version.shrc
source ${CLENV_ROOT}/lib/clamdb.shrc

if [[ ${CLAM_DEBUG:-} ]]; then
  set -x
fi

git_sync() {
  local _src=$1
  local _dest=$2

  if [ -d $_dest ]; then
    cd $_dest
    git pull
  else
    git clone --depth=1 ${_src} ${_dest}
    cd $_dest
  fi
}

if [[ $1 = "-r" || $1 = "--require" ]]; then
  exec ${CLENV_ROOT}/libexec/clam-install-deps ${2:-}
fi

parse_arg() {
  local arg=$1
  local ifs=$IFS
  IFS=","
  set -- $arg
  tgt_name=$1
  tgt_src=${2:-$1}
  tgt_ver=${3:-0}
  if [[ $tgt_name = $tgt_src ]]; then
    tgt_name=""
  fi
  IFS=$ifs
}

parse_arg $1

clamdb_init

force_install=""
if [[ ${2:-} = "-f" || ${2:-} = "--force" ]]; then
  force_install="true"
fi

check_installed() {
  local _name=$1
  local _version=$2
  local _post_process=${3:-}
  installed=$(clamdb_find $_name | tr '\t' ' ')
  local _ary i_name i_ver
  if [[ $installed ]]; then
    _ary=($(echo $installed))
    i_name=${_ary[0]}
    i_ver=${_ary[1]}
    version_compare $i_ver $_version comp_ret
    if (( $comp_ret >= 0 )); then
      echo "$installed already installed. Quit." >&2
      if [[ $_post_process ]]; then
        $_post_process
      fi
      exit 1
    fi
    unset comp_ret
  fi
}

if [[ $tgt_name && -z $force_install ]]; then
  check_installed $tgt_name $tgt_ver
fi

mode=""
module=$tgt_name

if [ -d $tgt_src ]; then
  _path=$(cd $tgt_src; pwd)
  if [ -r ${tgt_src}/clam.spec ]; then
    mode=copy
  else
    echo "clam.spec file not found! Can't install." >&2
    exit 1
  fi
  if [[ -z $module ]]; then
    module=${_path##*/}
  fi
else
  case "$tgt_src" in
    *:* )
      mode=git
      ;;
    * )
      ;;
  esac
fi

if [[ -z $mode ]]; then
  echo "Don't know how to install $tgt_src" >&2
  exit 1
fi
if [[ -z $module ]]; then
  module=${tgt_src##*/}
  module=${module%.git}
fi

workdir=${CLENV_ROOT}/tmp/${module}

echo "Sync ${tgt_src} into working directory"
case "$mode" in
  "copy" )
    cp -rp $tgt_src $workdir
    ;;
  "git" )
    git_sync $tgt_src $workdir
    ;;
  * )
    ;;
esac

cleanup() {
  rm -rf $workdir
}

cd $workdir

if [ -r clam.spec ];then
  unset name
  unset version
  unset executables
  unset resources
  source clam.spec
  name=${name:-$module}
  version=${version:-0}
else
  echo "clam.spec file not found! Can't install." >&2
  cleanup
  exit 1
fi

dest_dir=${CLENV_ROOT}/environments/${CLENV_ENVIRONMENT}/modules
dest_module=${dest_dir}/${name}

if [[ $force_install ]]; then
  installed=$(clamdb_find $name | tr '\t' ' ')
  if [[ $installed ]]; then
    echo "$installed installed. Force re-install."
    ${CLENV_ROOT}/libexec/clam-uninstall $name
  fi
else
  check_installed $name $version cleanup
  if [[ $installed ]]; then
    echo "$installed installed. Update to $version."
    ${CLENV_ROOT}/libexec/clam-uninstall $name
  fi
fi

cp -rp $workdir $dest_module
echo "Sync ${module} into ${dest_module}"
cd $dest_module
cleanup

bin_dir=${CLENV_ROOT}/environments/${CLENV_ENVIRONMENT}/bin
lib_dir=${CLENV_ROOT}/environments/${CLENV_ENVIRONMENT}/lib

install_materials() {
  local _src=$1
  local _dest=$2
  local f __path

  if [[ $_src ]]; then
    for f in $(\ls -1 $_src); do
      if [ -f $f ]; then
        __path=$(abspath $f)
        ln -s ${__path} ${_dest}/
      else
        echo "Not exist $f Skip." >&2
      fi
    done
  fi
}

install_materials "${executables:-}" $bin_dir
install_materials "${resources:-}" $lib_dir

clamdb_add $name $version

echo "Installed ${name} - ver ${version}"

exit 0

: <<'__EOF__'

=encoding utf8

=head1 NAME

B<clam-install> - Install C<clam> modules

=head1 SYNOPSYS

Install or Update:

    clam-install git://<repos-url> [OPTION]
    clam-install /path/to/module [OPTION]
    # With module name
    clam-install foo,git://<repos-url>
    # With module name and version
    clam-install foo,git://<repos-url>,1.1

    # Force install
    clam-install git://<repos-url> -f|--force

    # Install from Clamfile
    clam-install -r|--require [Clamfile]

=head1 DESCRIPTION

This script installs C<clam> modules.

=head1 AUTHORS

IKEDA Kiyoshi E<lt>yasutake.kiyoshi@gmail.comE<gt>

=head1 LICENSE

The MIT License (MIT)

Copyright (c) 2016 IKEDA Kiyoshi

=cut

__EOF__

